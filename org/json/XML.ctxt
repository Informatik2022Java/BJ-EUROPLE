#BlueJ class context
comment0.target=XML
comment0.text=\r\n\ This\ provides\ static\ methods\ to\ convert\ an\ XML\ text\ into\ a\ JSONObject,\ and\ to\r\n\ covert\ a\ JSONObject\ into\ an\ XML\ text.\r\n\r\n\ @author\ JSON.org\r\n\ @version\ 2016-08-10\r\n
comment1.params=string
comment1.target=java.lang.Iterable\ codePointIterator(java.lang.String)
comment1.text=\r\n\ Creates\ an\ iterator\ for\ navigating\ Code\ Points\ in\ a\ string\ instead\ of\r\n\ characters.\ Once\ Java7\ support\ is\ dropped,\ this\ can\ be\ replaced\ with\r\n\ <code>\r\n\ string.codePoints()\r\n\ </code>\r\n\ which\ is\ available\ in\ Java8\ and\ above.\r\n\r\n\ @see\ <a\ href\=\r\n\ \ \ \ \ \ "http\://stackoverflow.com/a/21791059/6030888">http\://stackoverflow.com/a/21791059/6030888</a>\r\n
comment10.params=x\ context\ name\ config
comment10.target=boolean\ parse(XMLTokener,\ JSONObject,\ java.lang.String,\ XMLParserConfiguration)
comment10.text=\r\n\ Scan\ the\ content\ following\ the\ named\ tag,\ attaching\ it\ to\ the\ context.\r\n\r\n\ @param\ x\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ XMLTokener\ containing\ the\ source\ string.\r\n\ @param\ context\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ JSONObject\ that\ will\ include\ the\ new\ material.\r\n\ @param\ name\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ tag\ name.\r\n\ @return\ true\ if\ the\ close\ tag\ is\ processed.\r\n\ @throws\ JSONException\r\n
comment11.params=string\ typeConverter
comment11.target=java.lang.Object\ stringToValue(java.lang.String,\ XMLXsiTypeConverter)
comment11.text=\r\n\ This\ method\ tries\ to\ convert\ the\ given\ string\ value\ to\ the\ target\ object\r\n\ @param\ string\ String\ to\ convert\r\n\ @param\ typeConverter\ value\ converter\ to\ convert\ string\ to\ integer,\ boolean\ e.t.c\r\n\ @return\ JSON\ value\ of\ this\ string\ or\ the\ string\r\n
comment12.params=string
comment12.target=java.lang.Object\ stringToValue(java.lang.String)
comment12.text=\r\n\ This\ method\ is\ the\ same\ as\ {@link\ JSONObject\#stringToValue(String)}.\r\n\r\n\ @param\ string\ String\ to\ convert\r\n\ @return\ JSON\ value\ of\ this\ string\ or\ the\ string\r\n
comment13.params=val
comment13.target=java.lang.Number\ stringToNumber(java.lang.String)
comment13.text=\r\n\ direct\ copy\ of\ {@link\ JSONObject\#stringToNumber(String)}\ to\ maintain\ Android\ support.\r\n
comment14.params=val
comment14.target=boolean\ isDecimalNotation(java.lang.String)
comment14.text=\r\n\ direct\ copy\ of\ {@link\ JSONObject\#isDecimalNotation(String)}\ to\ maintain\ Android\ support.\r\n
comment15.params=string
comment15.target=JSONObject\ toJSONObject(java.lang.String)
comment15.text=\r\n\ Convert\ a\ well-formed\ (but\ not\ necessarily\ valid)\ XML\ string\ into\ a\r\n\ JSONObject.\ Some\ information\ may\ be\ lost\ in\ this\ transformation\ because\r\n\ JSON\ is\ a\ data\ format\ and\ XML\ is\ a\ document\ format.\ XML\ uses\ elements,\r\n\ attributes,\ and\ content\ text,\ while\ JSON\ uses\ unordered\ collections\ of\r\n\ name/value\ pairs\ and\ arrays\ of\ values.\ JSON\ does\ not\ does\ not\ like\ to\r\n\ distinguish\ between\ elements\ and\ attributes.\ Sequences\ of\ similar\r\n\ elements\ are\ represented\ as\ JSONArrays.\ Content\ text\ may\ be\ placed\ in\ a\r\n\ "content"\ member.\ Comments,\ prologs,\ DTDs,\ and\ <pre>{@code\ \r\n\ &lt;[\ [\ ]]>}</pre>\r\n\ are\ ignored.\r\n\r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ string.\r\n\ @return\ A\ JSONObject\ containing\ the\ structured\ data\ from\ the\ XML\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ errors\ while\ parsing\ the\ string\r\n
comment16.params=reader
comment16.target=JSONObject\ toJSONObject(java.io.Reader)
comment16.text=\r\n\ Convert\ a\ well-formed\ (but\ not\ necessarily\ valid)\ XML\ into\ a\r\n\ JSONObject.\ Some\ information\ may\ be\ lost\ in\ this\ transformation\ because\r\n\ JSON\ is\ a\ data\ format\ and\ XML\ is\ a\ document\ format.\ XML\ uses\ elements,\r\n\ attributes,\ and\ content\ text,\ while\ JSON\ uses\ unordered\ collections\ of\r\n\ name/value\ pairs\ and\ arrays\ of\ values.\ JSON\ does\ not\ does\ not\ like\ to\r\n\ distinguish\ between\ elements\ and\ attributes.\ Sequences\ of\ similar\r\n\ elements\ are\ represented\ as\ JSONArrays.\ Content\ text\ may\ be\ placed\ in\ a\r\n\ "content"\ member.\ Comments,\ prologs,\ DTDs,\ and\ <pre>{@code\ \r\n\ &lt;[\ [\ ]]>}</pre>\r\n\ are\ ignored.\r\n\r\n\ @param\ reader\ The\ XML\ source\ reader.\r\n\ @return\ A\ JSONObject\ containing\ the\ structured\ data\ from\ the\ XML\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ errors\ while\ parsing\ the\ string\r\n
comment17.params=reader\ keepStrings
comment17.target=JSONObject\ toJSONObject(java.io.Reader,\ boolean)
comment17.text=\r\n\ Convert\ a\ well-formed\ (but\ not\ necessarily\ valid)\ XML\ into\ a\r\n\ JSONObject.\ Some\ information\ may\ be\ lost\ in\ this\ transformation\ because\r\n\ JSON\ is\ a\ data\ format\ and\ XML\ is\ a\ document\ format.\ XML\ uses\ elements,\r\n\ attributes,\ and\ content\ text,\ while\ JSON\ uses\ unordered\ collections\ of\r\n\ name/value\ pairs\ and\ arrays\ of\ values.\ JSON\ does\ not\ does\ not\ like\ to\r\n\ distinguish\ between\ elements\ and\ attributes.\ Sequences\ of\ similar\r\n\ elements\ are\ represented\ as\ JSONArrays.\ Content\ text\ may\ be\ placed\ in\ a\r\n\ "content"\ member.\ Comments,\ prologs,\ DTDs,\ and\ <pre>{@code\r\n\ &lt;[\ [\ ]]>}</pre>\r\n\ are\ ignored.\r\n\r\n\ All\ values\ are\ converted\ as\ strings,\ for\ 1,\ 01,\ 29.0\ will\ not\ be\ coerced\ to\r\n\ numbers\ but\ will\ instead\ be\ the\ exact\ value\ as\ seen\ in\ the\ XML\ document.\r\n\r\n\ @param\ reader\ The\ XML\ source\ reader.\r\n\ @param\ keepStrings\ If\ true,\ then\ values\ will\ not\ be\ coerced\ into\ boolean\r\n\ \ or\ numeric\ values\ and\ will\ instead\ be\ left\ as\ strings\r\n\ @return\ A\ JSONObject\ containing\ the\ structured\ data\ from\ the\ XML\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ errors\ while\ parsing\ the\ string\r\n
comment18.params=reader\ config
comment18.target=JSONObject\ toJSONObject(java.io.Reader,\ XMLParserConfiguration)
comment18.text=\r\n\ Convert\ a\ well-formed\ (but\ not\ necessarily\ valid)\ XML\ into\ a\r\n\ JSONObject.\ Some\ information\ may\ be\ lost\ in\ this\ transformation\ because\r\n\ JSON\ is\ a\ data\ format\ and\ XML\ is\ a\ document\ format.\ XML\ uses\ elements,\r\n\ attributes,\ and\ content\ text,\ while\ JSON\ uses\ unordered\ collections\ of\r\n\ name/value\ pairs\ and\ arrays\ of\ values.\ JSON\ does\ not\ does\ not\ like\ to\r\n\ distinguish\ between\ elements\ and\ attributes.\ Sequences\ of\ similar\r\n\ elements\ are\ represented\ as\ JSONArrays.\ Content\ text\ may\ be\ placed\ in\ a\r\n\ "content"\ member.\ Comments,\ prologs,\ DTDs,\ and\ <pre>{@code\r\n\ &lt;[\ [\ ]]>}</pre>\r\n\ are\ ignored.\r\n\r\n\ All\ values\ are\ converted\ as\ strings,\ for\ 1,\ 01,\ 29.0\ will\ not\ be\ coerced\ to\r\n\ numbers\ but\ will\ instead\ be\ the\ exact\ value\ as\ seen\ in\ the\ XML\ document.\r\n\r\n\ @param\ reader\ The\ XML\ source\ reader.\r\n\ @param\ config\ Configuration\ options\ for\ the\ parser\r\n\ @return\ A\ JSONObject\ containing\ the\ structured\ data\ from\ the\ XML\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ errors\ while\ parsing\ the\ string\r\n
comment19.params=string\ keepStrings
comment19.target=JSONObject\ toJSONObject(java.lang.String,\ boolean)
comment19.text=\r\n\ Convert\ a\ well-formed\ (but\ not\ necessarily\ valid)\ XML\ string\ into\ a\r\n\ JSONObject.\ Some\ information\ may\ be\ lost\ in\ this\ transformation\ because\r\n\ JSON\ is\ a\ data\ format\ and\ XML\ is\ a\ document\ format.\ XML\ uses\ elements,\r\n\ attributes,\ and\ content\ text,\ while\ JSON\ uses\ unordered\ collections\ of\r\n\ name/value\ pairs\ and\ arrays\ of\ values.\ JSON\ does\ not\ does\ not\ like\ to\r\n\ distinguish\ between\ elements\ and\ attributes.\ Sequences\ of\ similar\r\n\ elements\ are\ represented\ as\ JSONArrays.\ Content\ text\ may\ be\ placed\ in\ a\r\n\ "content"\ member.\ Comments,\ prologs,\ DTDs,\ and\ <pre>{@code\ \r\n\ &lt;[\ [\ ]]>}</pre>\r\n\ are\ ignored.\r\n\r\n\ All\ values\ are\ converted\ as\ strings,\ for\ 1,\ 01,\ 29.0\ will\ not\ be\ coerced\ to\r\n\ numbers\ but\ will\ instead\ be\ the\ exact\ value\ as\ seen\ in\ the\ XML\ document.\r\n\r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ string.\r\n\ @param\ keepStrings\ If\ true,\ then\ values\ will\ not\ be\ coerced\ into\ boolean\r\n\ \ or\ numeric\ values\ and\ will\ instead\ be\ left\ as\ strings\r\n\ @return\ A\ JSONObject\ containing\ the\ structured\ data\ from\ the\ XML\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ errors\ while\ parsing\ the\ string\r\n
comment2.params=
comment2.target=java.util.Iterator\ iterator()
comment20.params=string\ config
comment20.target=JSONObject\ toJSONObject(java.lang.String,\ XMLParserConfiguration)
comment20.text=\r\n\ Convert\ a\ well-formed\ (but\ not\ necessarily\ valid)\ XML\ string\ into\ a\r\n\ JSONObject.\ Some\ information\ may\ be\ lost\ in\ this\ transformation\ because\r\n\ JSON\ is\ a\ data\ format\ and\ XML\ is\ a\ document\ format.\ XML\ uses\ elements,\r\n\ attributes,\ and\ content\ text,\ while\ JSON\ uses\ unordered\ collections\ of\r\n\ name/value\ pairs\ and\ arrays\ of\ values.\ JSON\ does\ not\ does\ not\ like\ to\r\n\ distinguish\ between\ elements\ and\ attributes.\ Sequences\ of\ similar\r\n\ elements\ are\ represented\ as\ JSONArrays.\ Content\ text\ may\ be\ placed\ in\ a\r\n\ "content"\ member.\ Comments,\ prologs,\ DTDs,\ and\ <pre>{@code\ \r\n\ &lt;[\ [\ ]]>}</pre>\r\n\ are\ ignored.\r\n\r\n\ All\ values\ are\ converted\ as\ strings,\ for\ 1,\ 01,\ 29.0\ will\ not\ be\ coerced\ to\r\n\ numbers\ but\ will\ instead\ be\ the\ exact\ value\ as\ seen\ in\ the\ XML\ document.\r\n\r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ string.\r\n\ @param\ config\ Configuration\ options\ for\ the\ parser.\r\n\ @return\ A\ JSONObject\ containing\ the\ structured\ data\ from\ the\ XML\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ errors\ while\ parsing\ the\ string\r\n
comment21.params=object
comment21.target=java.lang.String\ toString(java.lang.Object)
comment21.text=\r\n\ Convert\ a\ JSONObject\ into\ a\ well-formed,\ element-normal\ XML\ string.\r\n\r\n\ @param\ object\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ JSONObject.\r\n\ @return\ A\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ error\ parsing\ the\ string\r\n
comment22.params=object\ tagName
comment22.target=java.lang.String\ toString(java.lang.Object,\ java.lang.String)
comment22.text=\r\n\ Convert\ a\ JSONObject\ into\ a\ well-formed,\ element-normal\ XML\ string.\r\n\r\n\ @param\ object\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ JSONObject.\r\n\ @param\ tagName\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ optional\ name\ of\ the\ enclosing\ tag.\r\n\ @return\ A\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ error\ parsing\ the\ string\r\n
comment23.params=object\ tagName\ config
comment23.target=java.lang.String\ toString(java.lang.Object,\ java.lang.String,\ XMLParserConfiguration)
comment23.text=\r\n\ Convert\ a\ JSONObject\ into\ a\ well-formed,\ element-normal\ XML\ string.\r\n\r\n\ @param\ object\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ JSONObject.\r\n\ @param\ tagName\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ optional\ name\ of\ the\ enclosing\ tag.\r\n\ @param\ config\r\n\ \ \ \ \ \ \ \ \ \ \ \ Configuration\ that\ can\ control\ output\ to\ XML.\r\n\ @return\ A\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ error\ parsing\ the\ string\r\n
comment3.params=
comment3.target=boolean\ hasNext()
comment4.params=
comment4.target=java.lang.Integer\ next()
comment5.params=
comment5.target=void\ remove()
comment6.params=string
comment6.target=java.lang.String\ escape(java.lang.String)
comment6.text=\r\n\ Replace\ special\ characters\ with\ XML\ escapes\:\r\n\r\n\ <pre>{@code\ \r\n\ &amp;\ (ampersand)\ is\ replaced\ by\ &amp;amp;\r\n\ &lt;\ (less\ than)\ is\ replaced\ by\ &amp;lt;\r\n\ &gt;\ (greater\ than)\ is\ replaced\ by\ &amp;gt;\r\n\ &quot;\ (double\ quote)\ is\ replaced\ by\ &amp;quot;\r\n\ &apos;\ (single\ quote\ /\ apostrophe)\ is\ replaced\ by\ &amp;apos;\r\n\ }</pre>\r\n\r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ string\ to\ be\ escaped.\r\n\ @return\ The\ escaped\ string.\r\n
comment7.params=cp
comment7.target=boolean\ mustEscape(int)
comment7.text=\r\n\ @param\ cp\ code\ point\ to\ test\r\n\ @return\ true\ if\ the\ code\ point\ is\ not\ valid\ for\ an\ XML\r\n
comment8.params=string
comment8.target=java.lang.String\ unescape(java.lang.String)
comment8.text=\r\n\ Removes\ XML\ escapes\ from\ the\ string.\r\n\r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ string\ to\ remove\ escapes\ from\r\n\ @return\ string\ with\ converted\ entities\r\n
comment9.params=string
comment9.target=void\ noSpace(java.lang.String)
comment9.text=\r\n\ Throw\ an\ exception\ if\ the\ string\ contains\ whitespace.\ Whitespace\ is\ not\r\n\ allowed\ in\ tagNames\ and\ attributes.\r\n\r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ the\ string\ contains\ whitespace\ or\ is\ empty.\r\n
numComments=24
