#BlueJ class context
comment0.target=XMLTokener
comment0.text=\r\n\ The\ XMLTokener\ extends\ the\ JSONTokener\ to\ provide\ additional\ methods\r\n\ for\ the\ parsing\ of\ XML\ texts.\r\n\ @author\ JSON.org\r\n\ @version\ 2015-12-09\r\n
comment1.params=r
comment1.target=XMLTokener(java.io.Reader)
comment1.text=\r\n\ Construct\ an\ XMLTokener\ from\ a\ Reader.\r\n\ @param\ r\ A\ source\ reader.\r\n
comment2.params=s
comment2.target=XMLTokener(java.lang.String)
comment2.text=\r\n\ Construct\ an\ XMLTokener\ from\ a\ string.\r\n\ @param\ s\ A\ source\ string.\r\n
comment3.params=
comment3.target=java.lang.String\ nextCDATA()
comment3.text=\r\n\ Get\ the\ text\ in\ the\ CDATA\ block.\r\n\ @return\ The\ string\ up\ to\ the\ <code>]]&gt;</code>.\r\n\ @throws\ JSONException\ If\ the\ <code>]]&gt;</code>\ is\ not\ found.\r\n
comment4.params=
comment4.target=java.lang.Object\ nextContent()
comment4.text=\r\n\ Get\ the\ next\ XML\ outer\ token,\ trimming\ whitespace.\ There\ are\ two\ kinds\r\n\ of\ tokens\:\ the\ <pre>{@code\ '<'\ }</pre>\ character\ which\ begins\ a\ markup\r\n\ tag,\ and\ the\ content\r\n\ text\ between\ markup\ tags.\r\n\r\n\ @return\ \ A\ string,\ or\ a\ <pre>{@code\ '<'\ }</pre>\ Character,\ or\ null\ if\r\n\ there\ is\ no\ more\ source\ text.\r\n\ @throws\ JSONException\ if\ a\ called\ function\ has\ an\ error\r\n
comment5.params=ampersand
comment5.target=java.lang.Object\ nextEntity(char)
comment5.text=\r\n\ <pre>{@code\r\n\ Return\ the\ next\ entity.\ These\ entities\ are\ translated\ to\ Characters\:\r\n\ \ \ \ \ &amp;\ \ &apos;\ \ &gt;\ \ &lt;\ \ &quot;.\r\n\ }</pre>\r\n\ @param\ ampersand\ An\ ampersand\ character.\r\n\ @return\ \ A\ Character\ or\ an\ entity\ String\ if\ the\ entity\ is\ not\ recognized.\r\n\ @throws\ JSONException\ If\ missing\ ';'\ in\ XML\ entity.\r\n
comment6.params=e
comment6.target=java.lang.String\ unescapeEntity(java.lang.String)
comment6.text=\r\n\ Unescape\ an\ XML\ entity\ encoding;\r\n\ @param\ e\ entity\ (only\ the\ actual\ entity\ value,\ not\ the\ preceding\ &\ or\ ending\ ;\r\n\ @return\r\n
comment7.params=
comment7.target=java.lang.Object\ nextMeta()
comment7.text=\r\n\ <pre>{@code\ \r\n\ Returns\ the\ next\ XML\ meta\ token.\ This\ is\ used\ for\ skipping\ over\ <\!...>\r\n\ and\ <?...?>\ structures.\r\n\ \ }</pre>\r\n\ @return\ <pre>{@code\ Syntax\ characters\ (<\ >\ /\ \=\ \!\ ?)\ are\ returned\ as\r\n\ \ Character,\ and\ strings\ and\ names\ are\ returned\ as\ Boolean.\ We\ don't\ care\r\n\ \ what\ the\ values\ actually\ are.\r\n\ \ }</pre>\r\n\ @throws\ JSONException\ If\ a\ string\ is\ not\ properly\ closed\ or\ if\ the\ XML\r\n\ \ is\ badly\ structured.\r\n
comment8.params=
comment8.target=java.lang.Object\ nextToken()
comment8.text=\r\n\ <pre>{@code\r\n\ Get\ the\ next\ XML\ Token.\ These\ tokens\ are\ found\ inside\ of\ angle\r\n\ brackets.\ It\ may\ be\ one\ of\ these\ characters\:\ /\ >\ \=\ \!\ ?\ or\ it\r\n\ may\ be\ a\ string\ wrapped\ in\ single\ quotes\ or\ double\ quotes,\ or\ it\ may\ be\ a\r\n\ name.\r\n\ }</pre>\r\n\ @return\ a\ String\ or\ a\ Character.\r\n\ @throws\ JSONException\ If\ the\ XML\ is\ not\ well\ formed.\r\n
comment9.params=to
comment9.target=void\ skipPast(java.lang.String)
comment9.text=\r\n\ Skip\ characters\ until\ past\ the\ requested\ string.\r\n\ If\ it\ is\ not\ found,\ we\ are\ left\ at\ the\ end\ of\ the\ source\ with\ a\ result\ of\ false.\r\n\ @param\ to\ A\ string\ to\ skip\ past.\r\n
numComments=10
